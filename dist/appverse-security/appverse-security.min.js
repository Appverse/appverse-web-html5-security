/*! appverse-web-html5-security - v0.5.1 - */
!function(){"use strict";function a(a,b,c){c.exists("appverse.cache")||a.factory("CacheFactory",["$cacheFactory",function(a){return{_browserCache:a("basicCache")}}]);var d=["$q","$location","$injector",function(a,b,c){var d={request:function(b){var d=b.url,e=c.get("NewRoleService");return e.isPublicRoute(d)||(b.url=e.getRedirectionUrl()),b||a.when(b)}};return d}];b.interceptors.push(d);var e=["$q","$location",function(a,b){return{responseError:function(c){return 401===c.status?(b.path("/home"),a.reject(c)):a.reject(c)}}}];a.factory("logsOutUserOn401",e),b.interceptors.push("logsOutUserOn401")}function b(a){a.debug("appverse.security run")}a.$inject=["$provide","$httpProvider","ModuleSeekerProvider"],b.$inject=["$log"],angular.module("appverse.security",["ngCookies","appverse.configuration","appverse.utils","ngResource"]).config(a).run(b)}(),function(){"use strict";function a(a,b,c,d,e,f,g){return{sendLoginRequest:function(a){var b=e.defer(),f=c.encode(a.name+":"+a.password);return d({method:g.loginHTTPMethod,url:g.loginURL,headers:{Authorization:"Basic "+f,"Content-Type":g.Headers_ContentType},timeout:3e4,cache:!1}).success(function(a,c,d,e){var f=[];f.data=a,f.headers=d,f.status=c,f.config=e,b.resolve(f)}).error(function(a,c){b.reject(a,c)}),b.promise},sendLogoutRequest:function(){var a=e.defer();return d({method:g.logoutHTTPMethod,url:g.logoutURL,headers:{"Content-Type":g.Headers_ContentType},timeout:3e4,cache:!1}).success(function(b,c,d,e){var f=[];f.data=b,f.headers=d,f.status=c,f.config=e,a.resolve(f)}).error(function(b,c){a.reject(b,c)}),a.promise},login:function(a,c,d,e,g){var h=new User(a,c,d,e,g);f.debug(h.print()),b.setCurrentUser(h)},isLoggedIn:function(){return!!b.getCurrentUser()},logOut:function(a){b.removeUser(a)}}}a.$inject=["$rootScope","UserService","Base64","$http","$q","$log","SECURITY_GENERAL"],angular.module("appverse.security").factory("AuthenticationService",a)}(),function(){"use strict";function a(a,b,c){return{validateRouteByRol:function(b,c){a.debug("validateRouteByRol: route->"+b+" , role->"+c);var d,e=!1;if(validateRole(c)&&(d=getRoutesByRol(c),void 0!=d)){for(var f=0;d.length;f++)if(d[f]==b)return e=!0;for(var g=0;publicRoutes.length;f++)if(publicRoutes[g]==b)return e=!0}return e},isPublicRoute:function(b){a.debug("isPublicRoute: route->"+b);var c=getPublicRoutes(),d=!1;if(c)for(var e=0;e<c.length;e++)if(c[e]==b)return d=!0;return d},getRedirectionUrl:function(){a.debug("getRedirectionUrl");var c=b.redirection;return c},getPublicRoutes:function(){a.debug("getPublicRoutes");var c=b.publicRoutes;return c},getRoutesByRol:function(c){a.debug("getRoutesByRol: role->"+c);var d;if(validateRole(c))for(var e=0;b.routerRoles.length;e++)_.contains(c,b.routerRoles[e].roles)&&(d=b.routerRoles[e].routes);return d},validateRole:function(c){if(a.debug("validateRole: role->"+c),b.roles)for(var d=0;b.roles.length;d++)if(_.contains(c,b.roles[d]))return!0}}}a.$inject=["$log","ROLE_DATA","CacheFactory"],angular.module("appverse.security").factory("NewRoleService",a)}(),function(){"use strict";function a(a,b,c){return{validateRoleAdmin:function(){var d=c._browserCache.get("loggedUser").roles;a.debug("roles in session: "+d);var e;if(d&&b.adminRoles){for(var f=0;f<b.adminRoles.length;f++){if(_.contains(d,b.adminRoles[f])){e=!0;break}e=!1}return e}return!1},validateRoleInUserOther:function(a){var b=c._browserCache.get("loggedUser");return!!b&&_.contains(a,b.roles)}}}a.$inject=["$log","AUTHORIZATION_DATA","CacheFactory"],angular.module("appverse.security").factory("RoleService",a)}(),function(){"use strict";function a(a,c){return{setCurrentUser:function(b){c._browserCache.put("loggedUser",{username:b.name,roles:b.roles,bToken:b.bToken,xsrfToken:b.xsrfToken,isLogged:b.isLogged}),a.debug("New user has been stored to cache.")},getCurrentUser:function(){var a=c._browserCache.get("loggedUser");if(a&&a.isLogged)return new b(a.username,a.roles,a.bToken,a.xsrfToken,a.isLogged)},removeUser:function(){c._browserCache.remove("loggedUser")}}}function b(a,b,c,d,e){this.name=a,this.roles=b,this.bToken=c,this.xsrfToken=d,this.isLogged=e}a.$inject=["$log","CacheFactory"],angular.module("appverse.security").factory("UserService",a),b.prototype.print=function(){return"User data. Name:"+this.name+"| Roles: "+this.roles.toString()+"| Bearer Token: "+this.bToken+"| XSRFToken: "+this.xsrfToken+"| Logged: "+this.isLogged}}();
//# sourceMappingURL=appverse-security.min.js.map